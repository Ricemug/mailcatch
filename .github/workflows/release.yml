name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Build all platforms
        run: |
          # Linux amd64
          GOOS=linux GOARCH=amd64 go build -ldflags="-s -w -X main.Version=${{ steps.get_version.outputs.VERSION }}" -o build/mailcatch-linux-amd64 ./cmd/server

          # Linux arm64
          GOOS=linux GOARCH=arm64 go build -ldflags="-s -w -X main.Version=${{ steps.get_version.outputs.VERSION }}" -o build/mailcatch-linux-arm64 ./cmd/server

          # macOS amd64
          GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w -X main.Version=${{ steps.get_version.outputs.VERSION }}" -o build/mailcatch-darwin-amd64 ./cmd/server

          # macOS arm64
          GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w -X main.Version=${{ steps.get_version.outputs.VERSION }}" -o build/mailcatch-darwin-arm64 ./cmd/server

          # Windows amd64
          GOOS=windows GOARCH=amd64 go build -ldflags="-s -w -X main.Version=${{ steps.get_version.outputs.VERSION }}" -o build/mailcatch-windows-amd64.exe ./cmd/server

          # Windows arm64
          GOOS=windows GOARCH=arm64 go build -ldflags="-s -w -X main.Version=${{ steps.get_version.outputs.VERSION }}" -o build/mailcatch-windows-arm64.exe ./cmd/server

      - name: Create archives
        run: |
          cd build

          # Linux amd64
          tar czf mailcatch-v${{ steps.get_version.outputs.VERSION }}-linux-amd64.tar.gz mailcatch-linux-amd64

          # Linux arm64
          tar czf mailcatch-v${{ steps.get_version.outputs.VERSION }}-linux-arm64.tar.gz mailcatch-linux-arm64

          # macOS amd64
          tar czf mailcatch-v${{ steps.get_version.outputs.VERSION }}-darwin-amd64.tar.gz mailcatch-darwin-amd64

          # macOS arm64
          tar czf mailcatch-v${{ steps.get_version.outputs.VERSION }}-darwin-arm64.tar.gz mailcatch-darwin-arm64

          # Windows amd64
          zip mailcatch-v${{ steps.get_version.outputs.VERSION }}-windows-amd64.zip mailcatch-windows-amd64.exe

          # Windows arm64
          zip mailcatch-v${{ steps.get_version.outputs.VERSION }}-windows-arm64.zip mailcatch-windows-arm64.exe

      - name: Generate checksums
        run: |
          cd build
          sha256sum *.tar.gz *.zip > checksums.txt

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            build/*.tar.gz
            build/*.zip
            build/checksums.txt
          body: |
            ## MailCatch ${{ steps.get_version.outputs.VERSION }}

            ### Downloads

            Choose the appropriate binary for your platform:

            - **Linux AMD64**: `mailcatch-v${{ steps.get_version.outputs.VERSION }}-linux-amd64.tar.gz`
            - **Linux ARM64**: `mailcatch-v${{ steps.get_version.outputs.VERSION }}-linux-arm64.tar.gz`
            - **macOS AMD64** (Intel): `mailcatch-v${{ steps.get_version.outputs.VERSION }}-darwin-amd64.tar.gz`
            - **macOS ARM64** (Apple Silicon): `mailcatch-v${{ steps.get_version.outputs.VERSION }}-darwin-arm64.tar.gz`
            - **Windows AMD64**: `mailcatch-v${{ steps.get_version.outputs.VERSION }}-windows-amd64.zip`
            - **Windows ARM64**: `mailcatch-v${{ steps.get_version.outputs.VERSION }}-windows-arm64.zip`

            ### Installation

            1. Download the appropriate archive for your platform
            2. Extract the binary: `tar xzf mailcatch-*.tar.gz` (or unzip for Windows)
            3. Move to your PATH: `sudo mv mailcatch-* /usr/local/bin/mailcatch`
            4. Run: `mailcatch --help`

            ### Checksums

            Verify your download using the SHA256 checksums in `checksums.txt`.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
